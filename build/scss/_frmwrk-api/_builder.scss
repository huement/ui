@function is-what($var) {
  @return type-of($var);
}

// Module Builder
// Used to build screen + print modules
@mixin buildClass($class, $infix, $is-rfs-media-query: false) {
  $values: map-get($class, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($class, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class: if(
      map-has-key($class, class),
      map-get($class, class),
      nth($properties, 1)
    );

    // NEW!! Support for multiple classes!
    $props: ();
    @if (type-of($property-class) == "list") {
      // Grab first list item, save the rest.
      $first: first($property-class);
      $props: remove-nth($property-class, 1);
      $property-class: $first;
    }
    $property-class: if($property-class == null, "", $property-class);

    // Use custom CSS variable name if present, otherwise default to `class`
    $css-variable-name: if(
      map-has-key($class, css-variable-name),
      map-get($class, css-variable-name),
      map-get($class, class)
    );

    // State params to generate pseudo-classes
    $state: if(map-has-key($class, state), map-get($class, state), ());

    $infix: if(
      $property-class == "" and str-slice($infix, 1, 1) == "-",
      str-slice($infix, 2),
      $infix
    );

    // Don't prefix if value key is null (e.g. with shadow class)
    $property-class-modifier: if(
      $key,
      if($property-class == "" and $infix == "", "", "-") + $key,
      ""
    );

    @if map-get($class, rfs) {
      // Inside the media query
      @if $is-rfs-media-query {
        $val: rfs-value($value);
        $value: if($val == rfs-fluid-value($value), null, $val);
      } @else {
        $value: rfs-fluid-value($value);
      }
    }

    $is-css-var: map-get($class, css-var);
    $is-local-vars: map-get($class, local-vars);
    $is-rtl: map-get($class, rtl);

    @if $value != null {
      @if $is-rtl == false {
        /* rtl:begin:remove */
      }

      @if $is-css-var {
        $prop-string: ".#{$property-class + $infix + $property-class-modifier}";
        $size: length($props);

        @if ($size > 0) {
          @each $p in $props {
            $prop-string: $prop-string +
              unquote(",") +
              unquote(".#{$p + $infix + $property-class-modifier}");
          }
        }

        #{$prop-string} {
          --#{$prefix}#{$css-variable-name}: #{$value};
        }

        // @debug "CSSVAR: #{$prefix}#{$css-variable-name}: #{$value}";
        // @include cssvars((#{$prefix}#{$css-variable-name}: #{$value}));

        @each $pseudo in $state {
          $prop-string-pseudo: ".#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo}";

          @if ($size > 0) {
            @each $p in $props {
              $prop-string-pseudo: $prop-string-pseudo +
                unquote(",") +
                unquote(
                  ".#{$p + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo}"
                );
            }
          }

          #{$prop-string-pseudo} {
            --#{$prefix}#{$css-variable-name}: #{$value};
          }
        }
      } @else {
        $prop-string: ".#{$property-class + $infix + $property-class-modifier}";
        $size: length($props);
        @if ($size > 0) {
          @each $p in $props {
            $prop-string: $prop-string +
              unquote(",") +
              unquote(".#{$p + $infix + $property-class-modifier}");
          }
        }
        #{$prop-string} {
          @each $property in $properties {
            @if $is-local-vars {
              //@debug "is local var #{$property-class}";
              @each $local-var, $variable in $is-local-vars {
                --#{$prefix}#{$local-var}: #{$variable};
              }
            }
            #{$property}: $value
              if($enable-important-utilities, !important, null);
          }
        }

        @each $pseudo in $state {
          $prop-string-pseudo: ".#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo}";

          @if ($size > 0) {
            @each $p in $props {
              $prop-string-pseudo: $prop-string-pseudo +
                unquote(",") +
                unquote(
                  ".#{$p + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo}"
                );
            }
          }

          #{$prop-string-pseudo} {
            @each $property in $properties {
              @if $is-local-vars {
                @each $local-var, $variable in $is-local-vars {
                  --#{$prefix}#{$local-var}: #{$variable};
                }
              }
              #{$property}: $value
                if($enable-important-utilities, !important, null);
            }
          }
        }
      }

      @if $is-rtl == false {
        /* rtl:end:remove */
      }
    }
  }
}
