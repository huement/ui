//
// Base styles
//
@include cssvars(
  (
    alert-bg: transparent,
    alert-padding-x: $sz_4,
    alert-padding-y: $sz_4,
    alert-margin-bottom: $sz_3,
    alert-color: inherit,
    alert-border-color: transparent,
    alert-border-width: $border-width-lg,
    alert-border-radius: $border-radius-lg,
  )
);

@include superclass() {
  .alert {
    // scss-docs-start alert-css-vars
    // --alert-bg: transparent;
    // --alert-padding-x: #{$alert-padding-x};
    // --alert-padding-y: #{$alert-padding-y};
    // --alert-margin-bottom: #{$alert-margin-bottom};
    // --alert-color: inherit;
    // --alert-border-color: transparent;
    // --alert-border: #{$alert-border-width} solid var(--alert-border-color);
    // --alert-border-radius: #{$alert-border-radius};
    // scss-docs-end alert-css-vars

    position: relative;
    padding: cssvar(alert-padding-y) cssvar(alert-padding-x);
    margin-bottom: cssvar(alert-margin-bottom);
    color: cssvar(alert-color);
    background-color: cssvar(alert-bg);
    border: cssvar(alert-border);
    @include border-radius(cssvar(alert-border-radius));
  }

  // Headings for larger alerts
  .alert-heading {
    // Specified to prevent conflicts of changing $headings-color
    color: inherit;
  }

  // Provide class for links that match alerts
  // .alert-link {
  //   font-weight: $alert-link-font-weight;
  // }

  .rif {
    width: $sz_3 !important;
    height: $sz_3 !important;
    margin-top: $sz_2;
  }

  // Dismissible alerts
  //
  // Expand the right padding and account for the close button's positioning.

  .alert-dismissible {
    padding-right: $sz_2;

    // Adjust close link position
    .btn-close {
      position: absolute;
      top: 0;
      right: 0;
      z-index: $zindex-1 + 1;
      padding: calc(cssvar(alert-padding-y) * 1.25) cssvar(alert-padding-x);
    }
  }

  // Generate contextual modifier classes for colorizing the alert.
  @each $color, $map in $ThemeColors {
    $value: map.get($map, "main");

    $alert-background: shift-color($value, $alert-bg-scale);
    $alert-border: shift-color($value, $alert-border-scale);
    $alert-color: shift-color($value, $alert-color-scale);

    @if (contrast-ratio($alert-background, $alert-color) < $min-contrast-ratio) {
      $alert-color: mix($value, color-contrast($alert-background), abs($alert-color-scale));
    }

    .alert-#{$color} {
      @include alert-variant($alert-background, $alert-border, $alert-color);
    }
  }

  .callout {
    margin: $sz_3 auto;
    padding: $sz_3 $sz_4 $sz_4 $sz_5;
    line-height: 1.5;
    border-left: $border-width-lg solid $medium;
  }

  @each $color, $map in $ThemeColors {
    $value: map.get($map, "main");

    .callout-#{$color} {
      @include callout-variant($value);
    }
  }
}
