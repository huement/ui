// Button variant mixin
@mixin button-variant($color: $primary-color, $darkText: false) {
  $fontColor: getButtonData("text-light");
  @if ($darkText == true) or ($darkText == "dark") {
    $fontColor: getButtonData("text");
  }

  background: $color;
  border-color: darken($color, 3%);
  color: $fontColor;
  // &:focus {
  //   @include control-shadow($color);
  // }
  // &:focus,
  // &:hover {
  //   background: darken($color, 2%);
  //   border-color: darken($color, 5%);
  //   color: $light-color;
  // }
  // &:active,
  // &.active {
  //   background: darken($color, 7%);
  //   border-color: darken($color, 10%);
  //   color: $light-color;
  // }
  // &.loading {
  //   &::after {
  //     border-bottom-color: $light-color;
  //     border-left-color: $light-color;
  //   }
  // }
}

@mixin button-outline-variant($color: $primary, $background: $light) {
  background: $background;
  border-color: $color;
  color: $color;
  &:focus {
    @include control-shadow($color);
  }
  &:focus,
  &:hover {
    background: lighten($color, 50%);
    border-color: darken($color, 2%);
    color: darken($color, 10%);
  }
  &:active,
  &.active {
    background: $color;
    border-color: darken($color, 5%);
    color: $background;
  }
  &.loading {
    &::after {
      border-bottom-color: $color;
      border-left-color: $color;
    }
  }
}

@mixin button-icon($size) {
  padding: 0 !important;
  margin: 0 auto !important;
  height: $size !important;
  width: $size !important;
  font-size: $size !important;
}

///
/// @param {*} $color [$primary-color]
/// @param {*} $type ["icon","monogram"] Can be an icon or up to 2 letters

@mixin button-round-variant($color: $primary-color, $type: "icon") {
}

/// Handles the various hover, active, focus etc states
/// @param {*} $color [$primary-color]
/// @param {*} $type ["dark","light"] Should button get darker or lighter

@mixin button-hover-focus-active($color: $primary-color, $type: "dark") {
  $bg-color: $color;
  $border-color: lighten($color, 5%) !default;
  $action-color: lighten($border-color, 5%) !default;
  $text-color: $dark !default;
  @if ($type == "dark") {
    $border-color: darken($color, 5%) !default;
    $action-color: darken($border-color, 5%) !default;
    $text-color: $light !default;
    @debug "Dark Focus Button";
  }

  &:focus {
    @include control-shadow();
  }

  &:focus,
  &:hover {
    background: $bg-color;
    border-color: $border-color;
    text-decoration: none;
  }

  &:active,
  &.active {
    background: $border-color;
    border-color: $action-color;
    color: $text-color;
    text-decoration: none;
    &.loading {
      &::after {
        border-bottom-color: $text-color;
        border-left-color: $text-color;
      }
    }
  }

  &[disabled],
  &:disabled,
  &.disabled {
    cursor: default;
    opacity: 0.5;
    pointer-events: none;
  }
}

@mixin buttonHoverFocusActive($borderColor, $buttonColor, $darkText: true) {
  $fontColor: getButtonData("text-light");
  @if ($darkText == true) or ($darkText == "dark") {
    $fontColor: getButtonData("text");
  }

  $borderHoverColor: darken($borderColor, 10%);
  $bgHoverColor: darken($buttonColor, 10%);
  $fontHoverColor: darken($fontColor, 20%);
  $shadowHoverColor: darken($borderColor, 10%);
  $borderActiveColor: darken($borderColor, 5%);
  $bgActiveColor: lighten($buttonColor, 5%);
  $fontActiveColor: $dark;
  $shadowActiveColor: darken($borderColor, 10%);
  @if (getDarkOrLight($buttonColor) == "dark") {
    $borderHoverColor: darken($borderColor, 10%);
    $bgHoverColor: lighten($buttonColor, 10%);
    $fontHoverColor: darken($fontColor, 10%);
    $shadowHoverColor: darken($borderColor, 10%);
    $borderActiveColor: darken($borderColor, 5%);
    $bgActiveColor: lighten($buttonColor, 20%);
    $fontActiveColor: $light_white;
    $shadowActiveColor: darken($borderColor, 5%);
  }

  &:focus,
  &:hover {
    border-color: $borderHoverColor;
    background-color: $bgHoverColor;
    color: $fontHoverColor;
    box-shadow: inset 0 0 0 2px $shadowHoverColor;
  }

  &:active,
  &.active {
    border-color: $borderActiveColor;
    background-color: $bgActiveColor;
    color: $fontActiveColor;
    box-shadow: inset 0 0 0 2px $shadowActiveColor;
  }

  &.loading {
    &::after {
      border-bottom-color: lighten($borderColor, 20%);
      border-left-color: lighten($borderColor, 20%);
    }
  }
}

/// Adds a cool pulse effect to any item
/// @param {*} $bgcolor [false] must be background color behind button.
/// @param {*} $color [#FFFFFF] pulse shadow color

@mixin mojo_button_pulse($bgcolor: false, $color: #ffffff) {
  @if ($bgcolor == false) {
    $bgcolor: getPageColor("bg");
  }

  &.pulse {
    &:after {
      position: absolute;
      transition: 0.3s;
      content: "";
      width: 0;
      left: 50%;
      bottom: 0;
      height: 3px;
      background: $bgcolor;
    }

    &:hover {
      transform: scale(1.2) !important;

      &:after {
        width: 0%;
      }
    }
  }

  // Animate the size, outside
  &.pulse:hover,
  &.pulse:focus {
    animation: pulse 1s;
    box-shadow: 0 0 0 2rem rgba($color, 0);
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba($color, 1);
    }
  }
}

@mixin buttonBoxShadow {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.16), 0 0 0 1px rgba(0, 0, 0, 0.08);
}

@mixin buttonFocus() {
  .js-focus-visible :focus:not(.focus-visible),
  [data-js-focus-visible] :focus:not([data-focus-visible-added]),
  button:focus:not(:focus-visible) {
    outline: none;
  }
}

@function getButtonData($element: false) {
  @if (map-has-key($MojoButtons, $element)) {
    $buttonData: map.get($MojoButtons, $element);
    @return $buttonData;
  } @else {
    @error "`#{$element}` was not found in Button map";
  }
}
