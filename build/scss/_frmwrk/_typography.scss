//   ______  __  __   ______  ______   ______   ______   ______   ______  __  __   __  __
//  /\__  _\/\ \_\ \ /\  == \/\  __ \ /\  ___\ /\  == \ /\  __ \ /\  == \/\ \_\ \ /\ \_\ \
//  \/_/\ \/\ \____ \\ \  _-/\ \ \/\ \\ \ \__ \\ \  __< \ \  __ \\ \  _-/\ \  __ \\ \____ \
//     \ \_\ \/\_____\\ \_\   \ \_____\\ \_____\\ \_\ \_\\ \_\ \_\\ \_\   \ \_\ \_\\/\_____\
//      \/_/  \/_____/ \/_/    \/_____/ \/_____/ \/_/ /_/ \/_/\/_/ \/_/    \/_/\/_/ \/_____/
//
//  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  TEXT BASED MIXINS & FUNCTIONS  \\\\\\\\\\\\
//
//    This file concerns itself with the font-size and line-height and related functions.
//    For things like, line length, or ellipses and word wrap, see text.scss
//
//

// font(font-weight, font-size, letter-spacing)
@use "sass:map";
@use "sass:list";
@use "sass:math";

@mixin font($args...) {
  @include apply-props($args, font-weight, font-size, letter-spacing);
}

@mixin rem-font-size($size) {
  @if (unit($size) == "rem") {
    font-size: rem_px($size);
    font-size: $size;
  } @else if(unit($size) == "px") {
    font-size: $size;
    font-size: px_rem($size);
  } @else {
    @error '#{$size} is an invalid value for mixin `font-size`. Use `rem` or `px` only.';
  }
}

@mixin font-size-line-height($size, $important: false) {
  @if map-has-key($font-sizes, $size) and map-has-key($font-line-sizes, $size) {
    @if ($important == true) {
      font-size: map.get($font-sizes, $size) !important;
      line-height: map.get($font-line-sizes, $size) !important;
    } @else {
      font-size: map.get($font-sizes, $size);
      line-height: map.get($font-line-sizes, $size);
    }
  } @else {
    @error "Invalid font line-height size: '#{$size}'.";
  }
}

// Shortcut to quickly grab the corresponding font size for a given key from the global font-size map
@mixin getFontSize($size, $important: false) {
  @if map-has-key($font-sizes, $size) {
    @if ($important == true) {
      font-size: map.get($font-sizes, $size) !important;
    } @else {
      font-size: map.get($font-sizes, $size);
    }
  } @else {
    @error "Invalid font size: '#{$size}'.";
  }
}

// TODO UPDATE THE DATA THIS IS GETTING
@function getFontSize($size) {
  @if map-has-key($font-sizes, $size) {
    @return map.get($font-sizes, $size);
  } @else {
    @error "Invalid font size: '#{$size}'.";
  }
}

@mixin getFontLineSize($size, $important: false) {
  @if map-has-key($font-line-sizes, $size) {
    @if ($important == true) {
      line-height: map.get($font-line-sizes, $size) !important;
    } @else {
      line-height: map.get($font-line-sizes, $size);
    }
  } @else {
    @error "Invalid font line-height size: '#{$size}'.";
  }
}

@function getFontLineSize($size) {
  @if map-has-key($font-line-sizes, $size) {
    @return map.get($font-line-sizes, $size);
  } @else {
    @error "Invalid font line-height size: '#{$size}'.";
  }
}

@function getLineScale($value) {
  @return $value * $ModularRatio;
}

@function getFontFamily($fontType) {
  $fam: "";

  @if ($fontType == "code") or ($fontType == "mono") {
    $fam: getFontData($CodeFont);
  } @else if ($fontType == "heading") {
    $fam: getFontData($HeadingFont);
  } @else if ($fontType == "primary") {
    $fam: getFontData($PrimaryFont);
  } @else {
    @error "Invalid font param sent: #{$fontType}";
  }

  //@debug "!!!! getFontFamily #{$fontType} to #{$fam}";
  @return $fam;
}

/// Quickly return any font item(s) from the global font token map.
/// @param {*} $fontMap global fontmap ie PrimaryFont or HeadingFont map
@function getFontData($fontMap, $element: family) {
  $fontElement: map.get($fontMap, $element);
  @return $fontElement;
}

// Generate a new fancy variable @font-face declaration
// Also adds a standard font size for older browsers.
@mixin generate-variable-font-face($font-data, $cssVar) {
  $src: map.get($font-data, "src");
  $ext: map.get($font-data, "ext");
  $family: map.get($font-data, "family");
  $weight: map.get($font-data, "weight");
  $style: map.get($font-data, "style");
  $stack: map.get($font-data, "stack");
  $important: map.get($font-data, "important");

  //
  // The backup / standard way of including a custom @font-face
  // NOTE: there are other ways to accomplish this that can do more if you want to load in multiple font files
  //       for a single family. IE font.woff, font-bold.woff, font-light.woff etc.
  //       however since this is a fallback for older browsers, I dont think asking them to load a bunch of fonts
  //       is going to be a good experience on their admittedly older browser.
  //

  $selector: unquote(map.get($font-data, selector));
  #{$selector} {
    // font-family: $family, $stack;
    font-family: cssvar(#{unquote($cssVar)});
    font-style: $style;
    font-weight: $weight;
  }
}

//  BASIC @FONT-FACE MIXIN
//  --------------------------------------------------
//

$fonts: () !default;

//https://css-tricks.com/snippets/sass/str-replace-function/
// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin generate-font-face($font-family, $src, $font-weight, $font-style: normal) {
  @font-face {
    font-family: $font-family;
    src: $src;
    font-style: $font-style;
    font-weight: $font-weight;
    @content;
  }
}

@mixin font-face($fonts: $fonts, $types: $font-file-types, $path: $FontPath) {
  @each $font-family, $font-set in $fonts {
    @debug "Font Family #{$font-family}";

    @each $font-weight, $font-file in $font-set {
      @if type-of($font-file) == "string" {
        $src: fontSrc($path, $font-family, $font-file, $types);
        @include generate-font-face($font-family, $src, $font-weight) {
          @content;
        }
      } @else {
        @each $font-style, $file in $font-file {
          $src: fontSrc($path, $font-family, $file, $types);
          @include generate-font-face($font-family, $src, $font-weight, $font-style) {
            @content;
          }
        }
      }
    }
  }
}

/// Harmonic_FontFiles loads the global variable font familys with their
/// given selectors. This is only half the battle, you must also load in the
/// referenced font files seperatly. likely through a <link href=''/> file
/// in the head w/ a Google Fonts URL or however you like to get down.
///
@mixin Harmonic_LoadFont($globalFontMap, $cssVar, $globalStack) {
  @if map.has-key($globalFontMap, "family") {
    $GFF: map.get($globalFontMap, "family");

    @include cssvars((#{unquote($cssVar)}: #{$GFF, $globalStack}));

    @include superclass() {
      @include generate-variable-font-face($globalFontMap, $cssVar);
    }

    @include debugMessage("#{$GFF} Loaded");
  } @else {
    @warn "Invalid Global FontMap used. Cannot load font that we cannot find.";
  }
}

/// getMaxLineWidth : Optimal line width
///
/// Line widths that are too short or too long make it difficult to read.
///
/// @param {Number} $font-size Font size of the line (`rem`, `px`, `%`, or unitless)
/// @param {Number} $line-height Line height of the line (`rem`, `px`, `%`, or unitless)
/// @param {Number} $CPL or Character Per Line. 45-60 on average. (unitless)
/// @return {Number} The optimal line width in `px`
@function getMaxLineWidth($font-size, $line-height, $CPL: $MainContainerCPL) {
  $line-height: strip_units($line-height);
  $font-height: decimal_round(math.div($font-size, $line-height), 2);
  $width: $CPL * $font-height;

  $width_rem: _rem($width);

  @debug "Max Line Width PX computed as #{$width}";
  @debug "Max Line Width REM computed as #{$width_rem}";

  @return $width;
}

// @title   placeholder
// @details Form input placeholder text
@mixin placeholder {
  // scss-lint:disable VendorPrefix
  &::-moz-placeholder {
    @content;
  } // Firefox 19+
  &:-ms-input-placeholder {
    @content;
  } // IE 10+
  &::-ms-input-placeholder {
    @content;
  } // Edge
  &::-webkit-input-placeholder {
    @content;
  } // Safari and Chrome
}

@mixin text-hide($height: false, $width: false) {
  border: 0;
  text-shadow: none;
  color: transparent;
  background-color: transparent;
  @if ($height != false) {
    height: 0px;
  }
  @if ($width != false) {
    width: 0px;
  }
}

@mixin text-hyphen($type: none) {
  -webkit-hyphens: $type;
  -moz-hyphens: $type;
  -ms-hyphens: $type;
  hyphens: $type;
}

@mixin text-shadow($distance: 2px, $blur: 2px, $colour: fade-out(#000, 0.5), $angle: 0px) {
  text-shadow: $angle $distance $blur $colour;
}

@mixin text-wrap($wrap: break-word) {
  overflow-wrap: $wrap;
  word-wrap: $wrap;
  @if $wrap==break-word {
    word-break: break-all;
  } @else {
    word-break: $wrap;
  }
}

// whiteSpaceOverflow(white-space: nowrap, overflow: hidden, text-overflow: ellipsis, word-wrap: break-word)
@mixin ellipsis-text($white-space: nowrap, $overflow: hidden, $text-overflow: ellipsis, $word-wrap: break-word) {
  @include apply-props(
    ($white-space, $overflow, $text-overflow, $word-wrap),
    white-space,
    overflow,
    text-overflow,
    word-wrap
  );
}

// @title   text-overflow
// @details Requires inline-block or block for proper styling
@mixin text-overflow($width: 100%) {
  display: inline-block;
  max-width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
}

@mixin reset-text() {
  font-family: $font-family-base;
  // We deliberately do NOT reset font-size or word-wrap.
  font-style: normal;
  font-weight: $font-weight-normal;
  line-height: $line-height-base;
  text-align: left; // Fallback for where `start` is not supported
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  white-space: normal;
  word-spacing: normal;
  line-break: auto;
}

// =============================================================================
// DROP CAPS
// =============================================================================
/// Make first letter a dropcap
/// @param {String} $float-position [left] - Float dropcap so that it does not interupt vertical rhythm of paragraph
/// @param {Number} $font-size [4em] - `font-size` for dropcap
/// @param {String} $font-family [inherit] - `font-family` for dropcap
/// @param {Number} $text-indent [0] - Text indent for dropcap
/// @param {List} $margin [10px 10px 0 0] - `margin` for dropcap
/// @param {List} $padding [0 20px] - `padding` for dropcap
/// @param {Color} $color [inherit] - `color` fo dropcap
/// @param {Number} $line-height [1] - `line-height` for dropcap
/// @param {List} $bg [transparent] - `background` for dropcap
/// @output Properties to create a dropcap
@mixin Harmonic_Dropcap(
  $float-position: left,
  $font-size: 4rem,
  $font-family: inherit,
  $text-indent: 0,
  $margin: 10px 10px 0 0,
  $padding: 0 20px,
  $color: inherit,
  $line-height: 1,
  $bg: transparent
) {
  &::first-letter {
    background: $bg;
    color: $color;
    float: $float-position;
    font-family: $font-family;
    @include rem-font-size($font-size);
    line-height: $line-height;
    margin: $margin;
    padding: $padding;
    text-indent: $text-indent;
  }
}
