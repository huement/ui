@function map-loop($map, $func, $args...) {
  $_map: ();

  @each $key, $value in $map {
    // allow to pass the $key and $value of the map as an function argument
    $_args: ();
    @each $arg in $args {
      $_args: append($_args, if($arg == "$key", $key, if($arg == "$value", $value, $arg)));
    }

    $_map: map-merge(
      $_map,
      (
        $key: call(get-function($func), $_args...),
      )
    );
  }

  @return $_map;
}
// stylelint-enable scss/dollar-variable-pattern

// Get multiple keys from a sass map
@function map-get-multiple($map, $values) {
  $result: ();
  @each $key, $value in $map {
    @if (index($values, $key) != null) {
      $result: map-merge(
        $result,
        (
          $key: $value,
        )
      );
    }
  }
  @return $result;
}

// Merge multiple maps
@function map-merge-multiple($maps...) {
  $merged-maps: ();

  @each $map in $maps {
    $merged-maps: map-merge($merged-maps, $map);
  }
  @return $merged-maps;
}

///    index-to-key
/// @details get map key via given index number
@function index-to-key($index, $targetMap: $chords) {
  $keys: map-keys($targetMap); // A list of all keys in a $breakpoints map
  // @if index($keys, $index) {
  @if ($index==0) {
    @warn "SCSS Indexes start at 1 not 0! Ya Dingus!";
    @return "xs";
  } @else if ($index <=length($keys)) {
    @return nth($keys, $index);
  } @else {
    @warn "Requested Index is greater than total Keys";
    @return "xl";
  }
}

@function depth($map) {
  $level: 1;
  @each $key, $value in $map {
    @if type-of($value) == "map" {
      $level: max(depth($value) + 1, $level);
    }
  }
  @return $level;
}

@mixin debug-map($map) {
  @at-root {
    @debug-map {
      __tostring__: inspect($map);
      __length__: length($map);
      __depth__: depth($map);
      __keys__: map-keys($map);
      __properties__ {
        @each $key, $value in $map {
          #{'(' + type-of($value) + ') ' + $key}: inspect($value);
        }
      }
    }
  }
}

///  map-deep-get
/// @details Loop through a nested map to get keys that are lodged way up in there.
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map.get($map, $key);
  }
  @return $map;
}

/// Function to get next map item
/// returns next map item or fallback value if map, key or next item does not exist
/// Github Repo: https://github.com/elcheio/sass-map.get-next-prev
/// Node Module: https://www.npmjs.com/package/sass-map.get-next-prev
///
/// @author Simon Koch <agorilla@me.com>
///
/// Licensed under the MIT license.
///
/// @access public
///
/// @param {Map} $map - Sass list map
/// @param {String} $key - List map key
/// @param {Boolean} $fallback (false) - Fallback value if map, key or previous item does not exist
/// @param {String} $return (value) - Return value or key of previous list item
/// @param {Boolean} $debug (false) - Debug option
///
/// @example scss - Usage
///$map: (
///   s: 320px,
///   m: 768px,
/// );
///
/// .foo {
///   width: map.get-next($map, s);
/// }
///
/// .bar {
/// width: map.get-next($map, m, 1024px);
/// }
///
/// @example css - CSS output
/// .foo {
///   width: 768px;
/// }
///
/// .bar {
///   width: 1024px;
/// }
@function map-get-next($map, $key, $fallback: false, $return: value) {
  // Check if map is valid
  @if type-of($map) ==map {
    // Check if key exists in map
    @if map-has-key($map, $key) {
      // Init index counter variable
      $i: 0;
      // Init key index
      $key-index: false;
      // Traverse map for key
      @each $map-key, $map-value in $map {
        // Update index
        $i: $i + 1;
        // If map key found, set key index
        @if $map-key==$key {
          $key-index: $i;
        }
        // If next index return next value or key based on $return
        @if $i==$key-index + 1 {
          @if $return==key {
            @return $map-key;
          } @else {
            @return $map-value;
          }
        }
        // If last entry return false
        @if $i==length($map) {
          @return $fallback;
        }
      }
      @warn 'No next map item for key #{$key}';
      @return $fallback;
    }
    @warn 'No valid key #{$key} in map';
    @return $fallback;
  }
  @warn 'No valid map';
  @return $fallback;
}

/// Function to get previous map item
/// returns previous map item or fallback value if map, key or previous item does not exist
///
/// @author Simon Koch <agorilla@me.com>
///
/// Licensed under the MIT license.
///
/// @access public
///
/// @param {Map} $map - Sass list map
/// @param {String} $key - List map key
/// @param {Boolean} $fallback (false) - Fallback value if map, key or previous item does not exist
/// @param {String} $return (value) - Return value or key of previous list item
/// @param {Boolean} $debug (false) - Debug option
///
/// @example scss - Usage
/// $map: (
///   s: 320px,
///   m: 768px,
/// );
///
/// .foo {
///   width: map.get-prev($map, m);
/// }
///
/// .bar {
/// width: map.get-prev($map, s, 240px);
/// }
///
/// @example css - CSS output
/// .foo {
///   width: 320px;
/// }
///
/// .bar {
///   width: 240px;
/// }
@function map-get-prev($map, $key, $fallback: false, $return: value, $debug: false) {
  // Check if map is valid
  @if type-of($map) ==map {
    @if $debug {
      @debug "Map exists #{$map}";
    }
    // Check if key exists in map
    @if map-has-key($map, $key) {
      @if $debug {
        @debug "Map has key #{$key}";
      }
      // Init index counter variable
      $i: 1;
      // Init key index
      $key-index: false;
      $previous-index: false;
      // Traverse map for key
      @each $map-key, $map-value in $map {
        @if $debug {
          @debug "map-key: #{$map-key}, map-value: #{$map-value}, i: #{$i}";
        }
        // If map key found, set key index
        @if $map-key==$key {
          $key-index: $i;
          @if $debug {
            @debug "found key-index: #{$key-index}";
          }
        }
        // Update index
        $i: $i + 1;
      }
      // If the key-index exists, iterate through the map again
      @if $key-index !=false {
        $previous-index: $key-index - 1;
        $i: 1;
        // If the previous key is less than one, use the fallback
        @if $previous-index < 1 {
          @warn 'no previous item in map, returning fallback';
          @return $fallback;
        } @else {
          // Traverse map for key
          @each $map-key, $map-value in $map {
            @if $i==$previous-index {
              @if $return== "key" {
                @if $debug {
                  @debug "found! returning map-key: #{$map-key}";
                }
                @return $map-key;
              } @else {
                @if $debug {
                  @debug "found! returning map-value: #{$map-value}";
                }
                @return $map-value;
              }
            }
            // Update index
            $i: $i + 1;
          }
        }
      } @else {
        @warn 'No previous map item for key #{$key}';
        @return $fallback;
      }
    } @else {
      @warn 'No valid key #{$key} in map';
      @return $fallback;
    }
  } @else {
    @warn 'No valid map';
    @return $fallback;
  }
}

// turn maps negative.  prefixes keys with `n` and makes negative values.
@function negativify-map($map) {
  $result: ();
  @each $key, $value in $map {
    @if $key != 0 {
      $result: map-merge($result, ("n" + $key: (-$value)));
    }
  }
  @return $result;
}
