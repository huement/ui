// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.
@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:color';
@use 'sass:meta';
@use 'sass:string';

/// Start off by loading all the Bootstrap Functions and then any additional HUI Functions
@import 'bootstrap/scss/functions';

///   Superclass
///  --------------------
///   The superclass is the application root class that
///   wraps and scope the lib selectors. Use this class
///   to wrap the modules in a superclass preserving the
///   outer scope from the lib effects

@mixin superclass() {
  @if $superclass and str-length($superclass) >0 {
    .#{$superclass} {
      @content;
    }
  } @else {
    body {
      @content;
    }
  }
}

///   CSS Variables
///  --------------------
///   Use this mixin to declare a set of CSS Custom Properties.
///   The variables in $css_variables will be properly prefixed.
///   The use of this mixin is encouraged to keep a good scalability.

@mixin cssvars($css_variables) {
  :root {
    @each $name, $value in $css_variables {
      --#{$name}: #{$value};
    }
  }
}

/// This mixin is used to change a CSS property value.
/// It will change a declared css variable auto-prefixing it.
@mixin cssvar($name, $value: '') {
  --#{$name}: #{$value};
}

/// Retrieve a css variable value with already autoprefixed.
/// Use the mixin if you want to change the variable value.
@function cssvar($name) {
  @return var(--#{$name});
}

//
// Bootstrap functions
//

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;

  @each $key, $num in $map {
    @if $prev-num
      ==null or
      math.unit($num) ==
      '%' or
      math.unit($prev-num) ==
      '%'
    {
      // Do nothing
    } @else if not math.compatible($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >=$num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }

    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map, $map-name: '$grid-breakpoints') {
  @if list.length($map) >0 {
    $values: map.values($map);
    $first-value: list.nth($values, 1);

    @if $first-value !=0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
}

// Colors
@function to-rgb($value) {
  @return color.channel($value, 'red', $space: rgb),
    color.channel($value, 'green', $space: rgb),
    color.channel($value, 'blue', $space: rgb);
}

// stylelint-disable scss/dollar-variable-pattern
@function rgba-css-var($identifier, $target) {
  @if $identifier == 'body' and $target == 'bg' {
    @return rgba(
      var(--#{$prefix}#{$identifier}-bg-rgb),
      var(--#{$prefix}#{$target}-opacity)
    );
  }

  @if $identifier == 'body' and $target == 'text' {
    @return rgba(
      var(--#{$prefix}#{$identifier}-color-rgb),
      var(--#{$prefix}#{$target}-opacity)
    );
  } @else {
    @return rgba(
      var(--#{$prefix}#{$identifier}-rgb),
      var(--#{$prefix}#{$target}-opacity)
    );
  }
}

@function map-loop($map, $func, $args...) {
  $_map: ();

  @each $key, $value in $map {
    // allow to pass the $key and $value of the map as an function argument
    $_args: ();

    @each $arg in $args {
      $_args: list.append(
        $_args,
        if($arg == '$key', $key, if($arg == '$value', $value, $arg))
      );
    }

    $_map: map.merge(
      $_map,
      (
        $key: meta.call(meta.get-function($func), $_args...),
      )
    );
  }

  @return $_map;
}

// stylelint-enable scss/dollar-variable-pattern

@function varify($list) {
  $result: null;

  @each $entry in $list {
    $result: append($result, var(--#{$prefix}#{$entry}), space);
  }

  @return $result;
}

// Internal Bootstrap function to turn maps into its negative variant.
// It prefixes the keys with `n` and makes the value negative.
@function negativify-map($map) {
  $result: ();

  @each $key, $value in $map {
    @if $key !=0 {
      $result: map.merge($result, ('n' + $key: (-$value)));
    }
  }

  @return $result;
}

// Get multiple keys from a sass map
@function map-get-multiple($map, $values) {
  $result: ();

  @each $key, $value in $map {
    @if  index($values, $key) !=null {
      $result: map.merge(
        $result,
        (
          $key: $value,
        )
      );
    }
  }

  @return $result;
}

// Merge multiple maps
@function map-merge-multiple($maps...) {
  $merged-maps: ();

  @each $map in $maps {
    $merged-maps: map.merge($merged-maps, $map);
  }

  @return $merged-maps;
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Kitty Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

// See https://codepen.io/kevinweber/pen/dXWoRw
//
// Requires the use of quotes around data URIs.

@function escape-svg($string) {
  @if str-index($string, 'data:image/svg+xml') {
    @each $char, $encoded in $escaped-characters {
      // Do not escape the url brackets
      @if str-index($string, 'url(') ==1 {
        $string: url('#{str-replace(str-slice($string, 6, -3), $char, $encoded)}');
      } @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

// Return valid calc
@function add($value1, $value2, $return-calc: true) {
  @if $value1 ==null {
    @return $value2;
  }

  @if $value2 ==null {
    @return $value1;
  }

  @if meta.type-of($value1)
    ==number and
    meta.type-of($value2)
    ==number and
    math.compatible($value1, $value2)
  {
    @return $value1 + $value2;
  }

  @return if(
    $return-calc ==true,
    calc(#{$value1} + #{$value2}),
    $value1 + string.unquote(' + ') + $value2
  );
}

@function subtract($value1, $value2, $return-calc: true) {
  @if $value1 ==null and $value2 ==null {
    @return null;
  }

  @if $value1 ==null {
    @return -$value2;
  }

  @if $value2 ==null {
    @return $value1;
  }

  @if meta.type-of($value1)
    ==number and
    meta.type-of($value2)
    ==number and
    math.compatible($value1, $value2)
  {
    @return $value1 - $value2;
  }

  @if meta.type-of($value2) !=number {
    $value2: string.unquote('(') + $value2 + string.unquote(')');
  }

  @return if(
    $return-calc ==true,
    calc(#{$value1} - #{$value2}),
    $value1 + string.unquote(' - ') + $value2
  );
}

@function divide($dividend, $divisor, $precision: 10) {
  $sign: if(
    $dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0,
    1,
    -1
  );
  $dividend: abs($dividend);
  $divisor: abs($divisor);

  @if $dividend ==0 {
    @return 0;
  }

  @if $divisor ==0 {
    @error "Cannot divide by 0";
  }

  $remainder: $dividend;
  $result: 0;
  $factor: 10;

  @while  $remainder > 0 and $precision >=0 {
    $quotient: 0;

    @while  $remainder >=$divisor {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }

    $result: $result * 10 + $quotient;
    $factor: $factor * 0.1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;

    @if  $precision < 0 and $remainder >=$divisor * 5 {
      $result: $result + 1;
    }
  }

  $result: $result * $factor * $sign;
  $dividend-unit: math.unit($dividend);
  $divisor-unit: math.unit($divisor);
  $unit-map: (
    'px': 1px,
    'rem': 1rem,
    'em': 1em,
    '%': 1%,
  );

  @if (
    $dividend-unit !=$divisor-unit and map-has-key($unit-map, $dividend-unit)
  ) {
    $result: $result * map.get($unit-map, $dividend-unit);
  }

  @return $result;
}

/// HUI Additions

///    index-to-key
/// @details get map key via given index number
@function index-to-key($index, $targetMap: $chords) {
  $keys: map-keys($targetMap); // A list of all keys in a $breakpoints map

  // @if index($keys, $index) {
  @if  $index==0 {
    @warn "SCSS Indexes start at 1 not 0! Ya Dingus!";
    @return 'xs';
  } @else if $index <=list.length($keys) {
    @return list.nth($keys, $index);
  } @else {
    @warn "Requested Index is greater than total Keys";
    @return 'xl';
  }
}

@function depth($map) {
  $level: 1;

  @each $key, $value in $map {
    @if meta.type-of($value) == 'map' {
      $level: max(depth($value) + 1, $level);
    }
  }

  @return $level;
}

///  map-deep-get
/// @details Loop through a nested map to get keys that are lodged way up in there.
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map.get($map, $key);
  }

  @return $map;
}

/// Function to get next map item
/// returns next map item or fallback value if map, key or next item does not exist
/// Github Repo: https://github.com/elcheio/sass-map-get-next-prev
/// Node Module: https://www.npmjs.com/package/sass-map-get-next-prev
///
/// @author Simon Koch <agorilla@me.com>
///
/// Licensed under the MIT license.
///
/// @access public
///
/// @param {Map} $map - Sass list map
/// @param {String} $key - List map key
/// @param {Boolean} $fallback (false) - Fallback value if map, key or previous item does not exist
/// @param {String} $return (value) - Return value or key of previous list item
/// @param {Boolean} $debug (false) - Debug option
///
/// @example scss - Usage
///$map: (
///   s: 320px,
///   m: 768px,
/// );
///
/// .foo {
///   width: map-get-next($map, s);
/// }
///
/// .bar {
/// width: map-get-next($map, m, 1024px);
/// }
///
/// @example css - CSS output
/// .foo {
///   width: 768px;
/// }
///
/// .bar {
///   width: 1024px;
/// }
@function map-get-next($map, $key, $fallback: false, $return: value) {
  // Check if map is valid
  @if meta.type-of($map) ==map {
    // Check if key exists in map
    @if map-has-key($map, $key) {
      // Init index counter variable
      $i: 0;

      // Init key index
      $key-index: false;

      // Traverse map for key
      @each $map-key, $map-value in $map {
        // Update index
        $i: $i + 1;

        // If map key found, set key index
        @if $map-key==$key {
          $key-index: $i;
        }

        // If next index return next value or key based on $return
        @if $i==$key-index + 1 {
          @if $return==key {
            @return $map-key;
          } @else {
            @return $map-value;
          }
        }

        // If last entry return false
        @if $i==list.length($map) {
          @return $fallback;
        }
      }

      @warn "No next map item for key #{$key}";
      @return $fallback;
    }

    @warn "No valid key #{$key} in map";
    @return $fallback;
  }

  @warn "No valid map";
  @return $fallback;
}

/// Function to get previous map item
/// returns previous map item or fallback value if map, key or previous item does not exist
///
/// @author Simon Koch <agorilla@me.com>
///
/// Licensed under the MIT license.
///
/// @access public
///
/// @param {Map} $map - Sass list map
/// @param {String} $key - List map key
/// @param {Boolean} $fallback (false) - Fallback value if map, key or previous item does not exist
/// @param {String} $return (value) - Return value or key of previous list item
/// @param {Boolean} $debug (false) - Debug option
///
/// @example scss - Usage
/// $map: (
///   s: 320px,
///   m: 768px,
/// );
///
/// .foo {
///   width: map.get-prev($map, m);
/// }
///
/// .bar {
/// width: map.get-prev($map, s, 240px);
/// }
///
/// @example css - CSS output
/// .foo {
///   width: 320px;
/// }
///
/// .bar {
///   width: 240px;
/// }
@function map-get-prev(
  $map,
  $key,
  $fallback: false,
  $return: value,
  $debug: false
) {
  // Check if map is valid
  @if meta.type-of($map) ==map {
    @if $debug {
      @debug 'Map exists #{$map}';
    }

    // Check if key exists in map
    @if map-has-key($map, $key) {
      @if $debug {
        @debug 'Map has key #{$key}';
      }

      // Init index counter variable
      $i: 1;

      // Init key index
      $key-index: false;
      $previous-index: false;

      // Traverse map for key
      @each $map-key, $map-value in $map {
        @if $debug {
          @debug 'map-key: #{$map-key}, map-value: #{$map-value}, i: #{$i}';
        }

        // If map key found, set key index
        @if $map-key==$key {
          $key-index: $i;

          @if $debug {
            @debug 'found key-index: #{$key-index}';
          }
        }

        // Update index
        $i: $i + 1;
      }

      // If the key-index exists, iterate through the map again
      @if $key-index !=false {
        $previous-index: $key-index - 1;
        $i: 1;

        // If the previous key is less than one, use the fallback
        @if $previous-index < 1 {
          @warn "no previous item in map, returning fallback";
          @return $fallback;
        } @else {
          // Traverse map for key
          @each $map-key, $map-value in $map {
            @if $i==$previous-index {
              @if $return== 'key' {
                @if $debug {
                  @debug 'found! returning map-key: #{$map-key}';
                }

                @return $map-key;
              } @else {
                @if $debug {
                  @debug 'found! returning map-value: #{$map-value}';
                }

                @return $map-value;
              }
            }

            // Update index
            $i: $i + 1;
          }
        }
      } @else {
        @warn "No previous map item for key #{$key}";
        @return $fallback;
      }
    } @else {
      @warn "No valid key #{$key} in map";
      @return $fallback;
    }
  } @else {
    @warn "No valid map";
    @return $fallback;
  }
}
