////
/// Conversion helper functions
/// @author Derek Scott
/// @group mojo_logic
////
// Sass Modules
@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:color';
@use 'sass:meta';

// =============================================================================
// MATH FUNCTIONS BELOW THIS LINE. MODIFY WITH GREAT CARE.
// =============================================================================

/// power: Raise $baseNum to the nth $exponent
/// @param  {number} $baseNum   Base number
/// @param  {number} $exponent  Exponent to which to raise $base
/// @return {number} $return    Resulting exponent number
@function power($baseNum, $exponent) {
  $return: 1;

  @if $exponent>0 {
    @for $i from 1 through $exponent {
      $return: $return * $baseNum;
    }
  } @else {
    @warn "Negative exponents NOT supported!";
  }

  @return $return;
}

/// Check if value is an integer and returns true or false
///
/// @param {*} $number
@function is-int($number) {
  @return type-of($number) ==number and floor(abs($number)) ==abs($number);
}

/// Resolve values to a multiple of our base
///
/// @param {*} $value [0]
/// @param {*} $roundup [false]
@function resolve($value: 0, $roundup: false) {
  $kb: ceil($font-size-root * $line-height-base);
  $newVal: math.div($value, $kb);
  $r: 0;

  @if ($roundup==false) {
    $r: ($value - $newVal);
  } @else if ($roundup==true) {
    $x: ($kb - $newVal);
    $r: ($value + $x);
  }

  @return $r;
}

@function resolveMultiple(
  $value: 0,
  $rootSize: $font-size-root,
  $mainLine: $line-height-base
) {
  $kb: ceil($rootSize * $mainLine);
  $newVal: math.div($value, $kb);
  $r: ($value - $newVal);
  @return $r;
}

//============================================================
// Variables
//============================================================
/// Default browser font size in pixels
///
/// Used to calculate conversions between different units
/// @type Number
/// @group mojo_logic

//============================================================
// Unit Converters
//============================================================
/// Convert value to be unitless
/// @param {Number} $value - Value to convert to be unitless. Acceptable units are `rem`, `px`, and `%`.
/// @return {Number} Value converted into unitless
/// @example
///   _to-unitless(100%)
///   => 1
/// @example
///   _to-unitless(1rem)
///   => 1
/// @example
///   _to-unitless(16px)
///   => 1
@function strip-units($value, $newUnit: '') {
  //https://www.sitepoint.com/understanding-sass-units/
  $units: (
    'px': 0,
    'cm': 0,
    'mm': 0,
    '%': 0%,
    'ch': 0,
    'in': 0,
    'em': 0,
    'rem': 0,
    'pt': 0,
    'pc': 0,
    'ex': 0,
    'vw': 0,
    'vh': 0,
    'vmin': 0,
    'vmax': 0,
    'deg': 0deg,
    'turn': 0turn,
    'rad': 0rad,
    'grad': 0grad,
    's': 0s,
    'ms': 0ms,
    'Hz': 0Hz,
    'kHz': 0kHz,
    'dppx': 0dppx,
    'dpcm': 0dpcm,
    'dpi': 0dpi
  );

  //https://css-tricks.com/snippets/sass/strip-unit-function/
  $number: math.div($value, ($value * 0 + 1));

  @if ($newUnit== '') {
    @return $number;
  }

  @if map-has-key($units, $newUnit) {
    @return map.get($units, $newUnit) + $number;
  }

  @error "Unknown unit `#{$newUnit}`.";
}

/// Convert value to `rem`s
/// @param {Number} $value - Value to convert to `rem`. Acceptable units are unitless, `px`, and `%`.
/// @return {Number} Value converted into `rem`s
/// @example
///   _rem(1)
///   => 1rem
/// @example
///   _rem(16px)
///   => 1rem
/// @example
///   _rem(100%)
///   => 1rem
@function _rem($value) {
  @if (unit($value) == 'rem') {
    @return $value;
  } @else if (unit($value) == 'px') {
    @return px_rem($value);
  } @else if (unit($value) == '%') {
    @return percent_rem($value);
  } @else if (unitless($value)) {
    @warn "Assuming #{$value} to be in `rem`s";
    @return $value * 1rem; // assume rem if unitless
  } @else {
    @error "#{$value} is an invalid value for function `_rem`. Use `rem`, `px`, `%`, or an unitless number instead.";
  }
}

/// Convert value to `px`s
/// @param {Number} $value - Value to convert to `px`. Acceptable units are unitless, `rem`, and `%`.
/// @return {Number} Value converted into `px`s
/// @example
///   _px(1)
///   => 16px
/// @example
///   _px(1rem)
///   => 16px
/// @example
///   _px(100%)
///   => 16px
@function _px($value) {
  @if (unit($value) == 'rem') {
    @return rem_px($value);
  } @else if (unit($value) == 'px') {
    @return $value;
  } @else if (unit($value) == '%') {
    @return percent_px($value);
  } @else if (unitless($value)) {
    @warn "Assuming #{$value} to be in `rem`s";
    @return rem_px($value); // assume rem if unitless
  } @else {
    @error "#{$value} is an invalid value for function `_px`. Use `rem`, `px`, `%`, or an unitless number instead.";
  }
}

/// Convert value to `%`s
/// @param {Number} $value - Value to convert to `%`. Acceptable units are unitless, `rem`, and `px`.
/// @return {Number} Value converted into `%`s
/// @example
///   _percent(1)
///   => 100%
/// @example
///   _percent(1rem)
///   => 100%
/// @example
///   _percent(16px)
///   => 100%
@function _percent($value) {
  @if (unit($value) == 'rem') {
    @return percent_px($value);
  } @else if (unit($value) == 'px') {
    @return percent_px($value);
  } @else if (unit($value) == '%') {
    @return $value;
  } @else if (unitless($value)) {
    @warn "Assuming #{$value} to be in `rem`s";
    @return rem_percent($value); // assume rem if unitless
  } @else {
    @error "#{$value} is an invalid value for function `_percent`. Use `rem`, `px`, `%`, or an unitless number instead.";
  }
}

//============================================================
// General Conversions
//============================================================
/// Converts units of a value.
///
/// Can only convert comparable units.
///
/// @param  {Number} $value - Value to convert
/// @param  {String} $unit - Unit to convert to
///
/// @return {Number} - Converted value
///
/// @example
///   unitConvert(10px, pt)
///   =>7.5pt
///
///   unitConvert(180deg, turn)
///   =>0.5turn
@function unitConvert($value, $unit) {
  $valid-units: (
    px: 0,
    pt: 0,
    pc: 0,
    mm: 0,
    cm: 0,
    in: 0,
    deg: 0deg,
    grad: 0grad,
    rad: 0rad,
    turn: 0turn,
    hz: 0Hz,
    khz: 0kHz,
    ms: 0ms,
    s: 0s
  );
  $result: map.get($valid-units, $unit) + $value;
  @return $result;
}

//============================================================
// Specific Conversions
//============================================================
/// Converts `px` to `em`.
///
/// @requires {function} stripUnits
///
/// @param {Number} $value - Value (in px) to convert
/// @param {Number} $base-font-size [16] - Value of the base font size (in px)
///
/// @return {Number} - `$value` in `em` units
///
/// @example
///   em(32)
///   =>2em
@function px_em($value, $base-font-size: $font-size-root) {
  $result: math.div(strip_units($value), $base-font-size) * 1em;
  @return $result;
}

/// Converts `px` to `rem`. Shorthand for 'to-rem()'
///
/// @requires {function} stripUnits
///
/// @param {Number} $value - Value (in px) to convert
/// @param {Number} $base-font-size [16] - Value of the base font size (in px)
///
/// @return {Number} - `$value` in `rem` units
///
/// @example
///   rem(32)
///   =>2rem
@function px_rem($value, $base-font-size: $font-size-root, $round: false) {
  @if not unitless($base-font-size) {
    @error "_RootFontSize should always be unitless!";
  }

  //@debug "converting #{$value}";
  $val: strip_units($value);
  $result: math.div($val, $base-font-size);
  $finalResult: $result * 1rem;

  @if ($round !=false) {
    $finalResult: decimal_round($finalResult, $round);
  }

  @return $finalResult;
}

/// Convert `%` to `rem`
/// @param {Number} $value - Value to be converted to `rem`. The only acceptable unit is `%`.
/// @return {Number} Value converted into `rem`
///
/// @example
///   percent_rem(100%)
///   =>1rem
@function percent_rem($value) {
  $converted-value: math.div(strip_units($value), 100);

  @if ($converted-value==0) {
    @return 0;
  } @else {
    @return $converted-value * 1px;
  }
}

/// Convert `rem` to `px`
/// @param {Number} $value - Value to be converted to `px`. The only acceptable unit is `rem`.
/// @return {Number} Value converted into `px`
/// @example
///   rem_px(1rem)
///   => 16px
@function rem_px($value) {
  $converted-value: strip_units($value) * $font-size-root;

  @if ($converted-value==0) {
    @return 0;
  } @else {
    @return $converted-value * 1px;
  }
}

/// Convert `%` to `px`
/// @param {Number} $value - Value to be converted to `px`. The only acceptable unit is `%`.
/// @return {Number} Value converted into `px`
/// @example
///   percent_px(100%)
///   => 16px
@function percent_px($value) {
  $converted-value: math.div(strip_units($value), 100) * $font-size-root;

  @if ($converted-value==0) {
    @return 0;
  } @else {
    @return $converted-value * 1px;
  }
}

/// Convert `rem` to `%`
/// @param {Number} $value - Value to be converted to `%`. The only acceptable unit is `rem`.
/// @return {Number} Value converted into `%`
/// @example
///   rem_percent(1rem)
///   => 100%
@function rem_percent($value) {
  $converted-value: strip_units($value) * 100;

  @if ($converted-value==0) {
    @return 0;
  } @else {
    @return $converted-value + 0%;
  }
}

/// Convert `px` to `%`
/// @param {Number} $value - Value to be converted to `%`. The only acceptable unit is `px`.
/// @return {Number} Value converted into `%`
/// @example
///   px_percent(16px)
///   => 100%
@function px_percent($value) {
  $val: $font-size-root * 100;
  $converted-value: math.div(strip_units($value), $val);

  @if ($converted-value==0) {
    @return 0;
  } @else {
    @return $converted-value + 0%;
  }
}

/// ROUND A NUMBER TO SPECIFIED DIGITS
/// @see gist.github.com/terkel/4373420
///
/// @param {*} $number
/// @param {*} $digits [0]
/// @param {*} $mode [round]
/// @return {Number} Adjusted value
@function decimal_round($number, $digits: 0, $mode: round) {
  $n: 1;

  // $number must be a number
  @if type-of($number) !=number {
    @warn "#{$number} is not a number.";
    @return $number;
  }

  // $digits must be a unitless number
  @if type-of($digits) !=number {
    @warn "#{$digits} is not a number.";
    @return $number;
  } @else if not unitless($digits) {
    @warn "#{$digits} has a unit.";
    @return $number;
  }

  @for $i from 1 through $digits {
    $n: $n * 10;
  }

  @if $mode==round {
    @return math.div(round($number * $n), $n);
  } @else if $mode==ceil {
    @return math.div(ceil($number * $n), $n);
  } @else if $mode==floor {
    @return math.div(floor($number * $n), $n);
  } @else {
    @warn "#{$mode} is undefined keyword.";
    @return $number;
  }
}

///
/// @param {*} $number
/// @param {*} $digits [0]
/// @return {Number} Adjusted value
@function decimal_ceil($number, $digits: 0) {
  @return decimal_round($number, $digits, ceil);
}

///
/// @param {*} $number
/// @param {*} $digits [0]
/// @return {Number} Adjusted value
@function decimal_floor($number, $digits: 0) {
  @return decimal_round($number, $digits, floor);
}
