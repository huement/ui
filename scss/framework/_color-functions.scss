@use "sass:math";

// COLOR FUNCTIONS
// Various Color related functions the framework needs to function properly.
// They have been sourced from BS4 & BS5 as well as other places

// Color contrast
@mixin color-yiq($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= 150) {
    color: darken($color, 65);
  } @else {
    color: #fff;
  }
}

// Retreive color Sass maps
@function color($key: "blue") {
  @return map-get($colors, $key);
}

@function theme-color($key: "primary") {
  @return map-get($theme-colors, $key);
}

@function grayscale($key: "100") {
  @return map-get($grays, $key);
}

// Request a theme color level
@function theme-color-level($color-name: "primary", $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, #000, #fff);

  @if $level < 0 {
    // Lighter values need a quick double negative for the Sass math to work
    @return mix($color-base, $color, $level * -1 * $theme-color-interval);
  } @else {
    @return mix($color-base, $color, $level * $theme-color-interval);
  }
}

// A list of pre-calculated numbers of pow(divide((divide($value, 255) + .055), 1.055), 2.4). (from 0 to 255)
// stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern
$_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044
  .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137
  .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296
  .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529
  .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844
  .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248
  .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746
  .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346
  .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305
  .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864
  .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793
  .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841
  .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011
  .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308
  .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734
  .9823 .9911 1;

@function color-contrast(
  $background,
  $color-contrast-dark: $color-contrast-dark,
  $color-contrast-light: $color-contrast-light,
  $min-contrast-ratio: $min-contrast-ratio
) {
  $foregrounds: $color-contrast-light, $color-contrast-dark, $white, $black;
  $max-ratio: 0;
  $max-ratio-color: null;

  @each $color in $foregrounds {
    $contrast-ratio: contrast-ratio($background, $color);
    @if $contrast-ratio > $min-contrast-ratio {
      @return $color;
    } @else if $contrast-ratio > $max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $color;
    }
  }

  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$background}...";

  @return $max-ratio-color;
}

@function contrast-ratio($background, $foreground: $color-contrast-light) {
  $l1: luminance($background);
  $l2: luminance(opaque($background, $foreground));

  @return if($l1 > $l2, divide($l1 + .05, $l2 + .05), divide($l2 + .05, $l1 + .05));
}

// Return WCAG2.1 relative luminance
// See https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// See https://www.w3.org/TR/WCAG/#dfn-contrast-ratio
@function get-relative-luminance($color) {
  $color: math.div($color, 255);

  @if ($color < .03928) {
    @return math.div($color, 12.92);
  }

  @return power(math.div(($color + .055), 1.055), 2);
}

@function luminance($color) {
  $red: get-relative-luminance(red($color));
  $green: get-relative-luminance(green($color));
  $blue: get-relative-luminance(blue($color));

  @return (.2126 * $red) + (.7152 * $green) + (.0722 * $blue);
}

// Return opaque color
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
@function opaque($background, $foreground) {
  @return mix(rgba($foreground, 1), $background, opacity($foreground) * 100%);
}

// =tint-color( $color, $amount[, $tint-color ])
// -----------------------------------------------------------------------------
/// Lightens given color, by mixing it with white.
/// @link https://css-tricks.com/snippets/sass/tint-shade-functions/
///
/// @param {color} $color - The color to tint (i.e. lighten)
/// @param {percentage} $amount - The amount of $color to mix in the result
///
/// @return {color} - The lightened version of $color
///
/// @example scss
///   $blue: #00F;
///   $light-blue: tint-color($blue, 15%);
///     // => #2626ff
///   $light-blue: tint-color($blue, 30%);
///     // => #4d4dff
///
/// @access public

@function tint-color($color, $weight) {
  @return mix(white, $color, $weight);
}

// shade-color( $color, $amount[, $shade-color ])
// -----------------------------------------------------------------------------
/// Darkens given color, by mixing it with a dark color (most often black).
/// @link https://css-tricks.com/snippets/sass/shade-shade-functions/
///
/// @param {color} $color - The color to shade (i.e. darken)
/// @param {percentage} $amount - The amount of $color to mix in the result
///
/// @return {color} - The darkened version of $color
///
/// @example scss
///   $blue: #0000ff;
///   $light-blue: shade-color($blue, 20%);
///     // => #000099
///   $light-blue: shade-color($blue, 40%);
///     // => #0000cc
///
/// @access public

@function shade-color($color, $weight) {
  @return mix(black, $color, $weight);
}

// Shade the color if the weight is positive, else tint it
@function shift-color($color, $weight) {
  @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}

// Color contrast
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) * .001;

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $dark;
  } @else {
    @return $light;
  }
}

@function get-contrast-color($color) {
  $lightContrast: contrast-ratio($color, white);
  $darkContrast: contrast-ratio($color, black);

  @if ($lightContrast > 4.5 or $darkContrast < 4.5) {
    @return white;
  }

  @return black;
}

// TODO Document Color Palette Functions

// CREATING COLOR PALETTES
// ============================================================================
// These functions take a base color and return related / complimentary / similar colors

@function shades($color, $change: n) {
  @if $change == n {
    @return $color;
  }
  @if $change == l1 {
    @return tint-color($color, 10%);
  }
  @if $change == l2 {
    @return tint-color($color, 25%);
  }
  @if $change == l3 {
    @return tint-color($color, 50%);
  }
  @if $change == l4 {
    @return tint-color($color, 75%);
  }
  @if $change == d1 {
    @return shade-color($color, 10%);
  }
  @if $change == d2 {
    @return shade-color($color, 25%);
  }
  @if $change == d3 {
    @return shade-color($color, 50%);
  }
  @if $change == d4 {
    @return shade-color($color, 75%);
  }
}

@function complementary($color, $change: n) {
  @if $change == n {
    @return complement($color);
  }
  @if $change == c {
    @return complement($color);
  }
  @if $change == dc {
    @return hsl(hue(complement($color)), saturation($color), 70);
  }
  @if $change == lb {
    @return hsl(hue($color), saturation($color), 70);
  }
  @if $change == db {
    @return hsl(hue($color), saturation($color), 30);
  }
}

@function triad($color, $change: n) {
  @if $change == n {
    @return $color;
  }
  @if $change == t1 {
    @return adjust-hue($color, 120deg);
  }
  @if $change == t2 {
    @return adjust-hue($color, 240deg);
  }
}

@function analogous($color, $change: n) {
  @if $change == n {
    @return $color;
  }
  @if $change == a1 {
    @return adjust-hue($color, 45deg);
  }
  @if $change == a2 {
    @return adjust-hue($color, -45deg);
  }
}

@function split($color, $change: n) {
  @if $change == n {
    @return $color;
  }
  @if $change == s1 {
    @return adjust-hue($color, 150deg);
  }
  @if $change == s2 {
    @return adjust-hue($color, 210deg);
  }
}
