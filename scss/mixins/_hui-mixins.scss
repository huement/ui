@mixin coolButton() {
  .cool-button {
    position: relative;
    z-index: 2;
    padding-top: 0;
    margin: 2rem auto;

    button {
      position: relative;
      padding: 16px 24px;
      background-color: transparent;
      border: 4px solid var(--bs-gray-800);
      transition: border-color .2s ease-in;

      span {
        font-family: Roboto, sans-serif;
        font-size: 24px;
        font-weight: 700;
        color: var(--bs-gray-800);
        text-transform: uppercase;
        letter-spacing: 5px;
        transition: color .2s linear;
      }

      &::after {
        position: absolute;
        top: 10px;
        left: 10px;
        z-index: -1;
        width: 100%;
        height: 100%;
        content: "";
        background-color: $yellow;
        transition: transform .2s ease-in, width .2s ease-out .2s;
      }

      &:hover {
        border-color: #000;

        span {
          color: #000;
        }

        &::after {
          width: calc(100% - 10px);
          transform: translate(-10px, -10px);
        }
      }

      &:active {
        &::after {
          width: 100%;
        }
      }
    }
  }
}


/// Generates a Cool Background Wave
/// @param {*} $bgColor body background color
/// @param {*} $waveColor color of the next content block

@mixin makeWave($bgColor, $waveBase, $height: 40vh) {
  $waveColor: str-slice(inspect($waveBase), 2);
  $waveEncode: "%23#{$waveColor}";
  position: relative;

  height: $height;
  background-color: $bgColor;

  &::before {
    position: absolute;
    bottom: -.3%;
    left: 0;
    width: 100%;
    height: 144px;
    content: "";
    background-image: url("data:image/svg+xml;utf8,<svg viewBox='0 0 1200  111' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M0 81L50 76C100 71 200 61 300 41C400 21 500 -8 600 1C700 11 800 61 900 81C1000 101 1100 91 1150 86L1200 81V111H1150C1100 111 1000 111 900 111C800 111 700 111 600 111C500 111 400 111 300 111C200 111 100 111 50 111H0V81Z' fill='#{$waveEncode}'/></svg>");
    background-repeat: repeat no-repeat;
    background-position: 39vw bottom;
    background-size: auto;
  }

  @media (max-width: 850px) {
    &::before {
      height: 72px;
    }
  }
}

@mixin text-shadow($string: 0 1px 3px rgba(0, 0, 0, .25)) {
  text-shadow: $string;
}

@mixin box-shadow($string) {
  box-shadow: $string;
  box-shadow: $string;
  box-shadow: $string;
}

@mixin box-sizing($type: border-box) {
  box-sizing: $type;
  box-sizing: $type;
  box-sizing: $type;
}

@mixin border-radius($radius: 5px) {

  background-clip: padding;
  background-clip: padding-box;
  background-clip: padding-box;
  border-radius: $radius;
  border-radius: $radius;
  border-radius: $radius;
  border-radius: $radius;
  border-radius: $radius;
}

@mixin border-radiuses($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {

  background-clip: padding;
  background-clip: padding-box;
  background-clip: padding-box;
  border-top-left-radius: $topleft;
  border-top-left-radius: $topleft;
  border-top-right-radius: $topright;

  border-top-right-radius: $topright;
  border-bottom-right-radius: $bottomright;
  border-bottom-right-radius: $bottomright;
  border-bottom-left-radius: $bottomleft;
  border-bottom-left-radius: $bottomleft;

  -moz-border-radius-topright: $topright;
  -moz-border-radius-bottomright: $bottomright;
  -moz-border-radius-bottomleft: $bottomleft;
  -moz-border-radius-topleft: $topleft;
}

@mixin opacity($opacity: .5) {
  -webkit-opacity: $opacity;
  -moz-opacity: $opacity;
  opacity: $opacity;
}

@mixin gradient($startColor: #eee, $endColor: white) {
  background: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
  background: linear-gradient(top, $startColor, $endColor);
  background: linear-gradient(top, $startColor, $endColor);
  background: linear-gradient(top, $startColor, $endColor);
  background: linear-gradient(top, $startColor, $endColor);
  background-color: $startColor;
}

@mixin horizontal-gradient($startColor: #eee, $endColor: white) {
  background-color: $startColor;
  background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));
  background-image: linear-gradient(left, $startColor, $endColor);
  background-image: linear-gradient(left, $startColor, $endColor);
  background-image: linear-gradient(left, $startColor, $endColor);
  background-image: linear-gradient(left, $startColor, $endColor);
}

@mixin animation($name, $duration: 300ms, $delay: 0, $ease: ease) {
  animation: $name $duration $delay $ease;
  animation: $name $duration $delay $ease;
  animation: $name $duration $delay $ease;
}

@mixin transition($transition) {
  transition: $transition;
  transition: $transition;
  transition: $transition;
  transition: $transition;
}

@mixin transform($string) {
  transform: $string;
  transform: $string;
  transform: $string;
  transform: $string;
}

@mixin scale($factor) {
  transform: scale($factor);
  transform: scale($factor);
  transform: scale($factor);
  transform: scale($factor);
}

@mixin rotate($deg) {
  transform: rotate($deg);
  transform: rotate($deg);
  transform: rotate($deg);
  transform: rotate($deg);
}

@mixin skew($deg, $deg2) {
  transform: skew($deg, $deg2);
  transform: skew($deg, $deg2);
  transform: skew($deg, $deg2);
  transform: skew($deg, $deg2);
}

@mixin translate($x, $y: 0) {
  transform: translate($x, $y);
  transform: translate($x, $y);
  transform: translate($x, $y);
  transform: translate($x, $y);
}

@mixin translate3d($x, $y: 0, $z: 0) {
  transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
}

@mixin perspective($value: 1000) {
  perspective: $value;
  perspective: $value;
  perspective: $value;
  perspective: $value;
}

@mixin transform-origin($x: center, $y: center) {
  transform-origin: $x $y;
  transform-origin: $x $y;
  transform-origin: $x $y;
  transform-origin: $x $y;
}

@mixin reset-box-sizing($size: content-box) {

  &,
  *,
  *::before,
  *::after {
    @include box-sizing($size);
  }
}

@mixin truncate($max-width: 250px) {
  max-width: $max-width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin background-size($string: contain) {
  background-size: $string;
  background-size: $string;
  background-size: $string;
  background-size: $string;
}

@mixin placeholder($color: #999) {
  &::input-placeholder {
    /* WebKit browsers */
    color: $color;
  }

  &:placeholder {
    /* Mozilla Firefox 4 to 18 */
    color: $color;
  }

  &::placeholder {
    /* Mozilla Firefox 19+ */
    color: $color;
  }

  &:input-placeholder {
    /* Internet Explorer 10+ */
    color: $color;
  }
}
