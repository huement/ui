//========================================================================================
//                                                                                      ##
//    RESPONSIVE DESIGN VIEWPORT LABELS                                                 ##
//    @title   mediaQueryDebug                                                          ##
//    @details prints out a text snippet w/ active media query name & size              ##
//                                                                                      ##
//========================================================================================
@mixin mojo_jolly-media($kickFlipMap: $chords) {
  // HTML Elements that will hold our debug content
  #mq,
  #scale,
  #fontSize,
  #lineHeight,
  #mq:after,
  #scale:after,
  #fontSize:after,
  #lineHeight:after {
    display: none;
  }

  // We fetch the breakpoint values like this:
  // 1st Loop. Up to Max.
  // 2+ Loop: From previous up to this loop max val
  // Last Loop: From this loop max val to infinite
  $mapCount: 0;
  $prevLabel: "";
  @each $mapKey, $mMap in $kickFlipMap {
    // -
    // To get started we setup some variables
    $totVal: length($kickFlipMap);
    $totValMinOne: length($kickFlipMap) - 1;
    $minVal: map-get(map-get($kickFlipMap, index-to-key($mapCount)), width_px);
    $maxVal: map-get($mMap, "width_px");
    // -
    // Now we do our conditonal Checks for each run through
    @if $mapCount==0 {
      // Debug Area is Between 0 and First key
      $prevLabel: strip_units(map-get($mMap, "width_px"));

      @media screen and (max-width: map-get($mMap, "width_px")) {
        #mq:after {
          content: "UNTL #{$prevLabel}";
        }
        #scale:after {
          $scale: map-get($mMap, "scale_name");
          content: "#{$scale}";
        }
        #fontSize:after {
          $fontSize: map-get($mMap, "fontSize");
          content: "#{$fontSize}";
        }
        #lineHeight:after {
          $lineHeight: map-get($mMap, "lineHeight");
          content: "#{$lineHeight}";
        }
      }
    } @else if $mapCount < $totValMinOne {
      // Debug Area is Between Two Keys
      @media screen and (min-width: #{$minVal + 1px}) and (max-width: #{$maxVal - 1px}) {
        #mq:after {
          content: "BTWN #{$prevLabel} & #{strip_units(map-get($mMap, width_px))}";
        }
        #scale:after {
          $scale: map-get($mMap, "scale_name");
          content: "#{$scale}";
        }
        #fontSize:after {
          $fontSize: map-get($mMap, "fontSize");
          content: "#{$fontSize}";
        }
        #lineHeight:after {
          $lineHeight: map-get($mMap, "lineHeight");
          content: "#{$lineHeight}";
        }
      }

      // Important. We set prevLabel on this run so the next (last) run its available.
      $prevLabel: strip_units(map-get($mMap, "width_px"));
    } @else {
      // Debug Area on Last Key. Go to Infinity & Beyond!
      // prevLabel is computed on the previous run
      $mapCount: $mapCount + 1;
      $maxVal: map-get(
        map-get($kickFlipMap, index-to-key($mapCount)),
        width_px
      );

      @media screen and (min-width: #{$minVal + 1px}) and (max-width: #{$maxVal - 1px}) {
        #mq:after {
          content: "BTWN #{$prevLabel} & #{strip_units(map-get($mMap, width_px))}";
        }
        #scale:after {
          $scale: map-get($mMap, "scale_name");
          content: "#{$scale}";
        }
        #fontSize:after {
          $fontSize: map-get($mMap, "fontSize");
          content: "#{$fontSize}";
        }
        #lineHeight:after {
          $lineHeight: map-get($mMap, "lineHeight");
          content: "#{$lineHeight}";
        }
      }

      @media screen and (min-width: $maxVal) {
        #mq:after {
          content: "FROM #{strip_units(map-get($mMap, width_px))}";
        }
        #scale:after {
          $scale: map-get($mMap, "scale_name");
          content: "#{$scale}";
        }
        #fontSize:after {
          $fontSize: map-get($mMap, "fontSize");
          content: "#{$fontSize}";
        }
        #lineHeight:after {
          $lineHeight: map-get($mMap, "lineHeight");
          content: "#{$lineHeight}";
        }
      }
    }
    // -
    // Important that we advance the count each loop
    $mapCount: $mapCount + 1;
  }
}

// Creates base type baseline overlay and vertical unit overlay.
// To use on the body tag for example: body { @include debug-vertical-alignment(); } and add class va-debug to the body tag
@mixin mojo_jolly-rhythm(
  $position: "absolute",
  $opacity: 0.8,
  $vertical-unit: $VerticalUnit,
  $type-base-line-multi: $MainLineMultiple,
  $type-size: $MainFontSize
) {
  position: relative;

  &::before,
  &::after {
    content: "";
    position: #{$position};
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    display: none;
  }

  &::before {
    z-index: 10;
    background-image: -webkit-linear-gradient(
      rgba(233, 0, 0, $opacity) 1px,
      rgba(0, 0, 0, 0) 1px
    );
    background-image: linear-gradient(
      rgba(233, 0, 0, $opacity) 1px,
      rgba(0, 0, 0, 0) 1px
    );
    background-size: 100%
      (unitlessRhythm($type-base-line-multi, $type-size) + 0rem);
  }

  &::after {
    z-index: 9;
    background-image: -webkit-linear-gradient(
      rgba(0, 233, 0, $opacity) 1px,
      rgba(0, 0, 0, 0) 1px
    );
    background-image: linear-gradient(
      rgba(0, 233, 0, $opacity) 1px,
      rgba(0, 0, 0, 0) 1px
    );
    background-size: 100% $vertical-unit;
  }

  &.va-debug::before,
  &.va-debug::after {
    display: block;
    pointer-events: none;
  }
}

@mixin grid-overlay($color: black, $px-offset: false) {
  body {
    background: linear-gradient(to top, rgba($color, 0.1) 5%, white 5%);
    background-size: 100% ($line-height-ratio) + em;
    @if ($px-offset) {
      background-position: 0 $px-offset + px;
    }
  }
}

@mixin mojo_jolly-margins($margin-top, $margin-bottom, $computed-font-size) {
  position: relative;

  &:before,
  &:after {
    content: "";
    display: block;
    left: 0;
    position: absolute;
    width: 100%;
  }

  &:before {
    background: hsla(200, 100%, 50%, 0.3)
      url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="40px" height="300px" viewBox="0 0 40 300"><path d="M9.5,1.5 L9.5,298.5" stroke="#1AB3FF"/><polyline stroke="#1AB3FF" fill="none" points="5.5 5.5 9.5 0.5 13.5 5.5"/></svg>')
      51% top repeat-y;
    height: $margin-top;
    top: -$margin-top;
  }

  &:after {
    background: hsla(200, 100%, 50%, 0.3)
      url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="40px" height="300px" viewBox="0 0 40 300"><path d="M9.5,1.5 L9.5,298.5" stroke="#1AB3FF"/><polyline stroke="#1AB3FF" fill="none" points="5.5 294.5 9.5 299.5 13.5 294.5"/></svg>')
      49% bottom repeat-y;
    bottom: -$margin-bottom;
    height: $margin-bottom;
  }
}
